{
    "input": {
        "description": "CSV samplesheet file containing information about the samples in the experiment.",
        "optional": false
    },
    "outdir": {
        "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
        "optional": true
    },
    "single_end": {
        "description": "Specifies that the input is single-end reads.",
        "optional": true
    },
    "assembly_input": {
        "description": "Additional input CSV samplesheet containing information about pre-computed assemblies. When set, both read pre-processing and assembly are skipped and the pipeline begins at the binning stage.",
        "optional": true
    },
    "email": {
        "description": "Email address for completion summary.",
        "optional": true
    },
    "multiqc_title": {
        "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
        "optional": true
    },
    "igenomes_ignore": {
        "description": "Do not load the iGenomes reference config.",
        "optional": true
    },
    "igenomes_base": {
        "description": "The base path to the igenomes reference files.",
        "optional": true
    },
    "custom_config_version": {
        "description": "Git commit id for Institutional configs.",
        "optional": true
    },
    "custom_config_base": {
        "description": "Base directory for Institutional configs.",
        "optional": true
    },
    "config_profile_name": {
        "description": "Institutional config name.",
        "optional": true
    },
    "config_profile_description": {
        "description": "Institutional config description.",
        "optional": true
    },
    "config_profile_contact": {
        "description": "Institutional config contact information.",
        "optional": true
    },
    "config_profile_url": {
        "description": "Institutional config URL link.",
        "optional": true
    },
    "version": {
        "description": "Display version and exit.",
        "optional": true
    },
    "publish_dir_mode": {
        "description": "Method used to save pipeline results to output directory.",
        "optional": true
    },
    "monochrome_logs": {
        "description": "Use monochrome logs.",
        "optional": true
    },
    "email_on_fail": {
        "description": "Email address for completion summary, only when pipeline fails.",
        "optional": true
    },
    "plaintext_email": {
        "description": "Send plain-text email instead of HTML.",
        "optional": true
    },
    "max_multiqc_email_size": {
        "description": "File size limit when attaching MultiQC reports to summary emails.",
        "optional": true
    },
    "hook_url": {
        "description": "Incoming hook URL for messaging service.",
        "optional": true
    },
    "multiqc_config": {
        "description": "Custom config file to supply to MultiQC.",
        "optional": true
    },
    "multiqc_logo": {
        "description": "Custom logo file to supply to MultiQC.",
        "optional": true
    },
    "multiqc_methods_description": {
        "description": "Custom MultiQC yaml file containing HTML including a methods description.",
        "optional": true
    },
    "validate_params": {
        "description": "Validate parameters against the schema at runtime.",
        "optional": true
    },
    "pipelines_testdata_base_path": {
        "description": "Base URL or local path to location of pipeline test dataset files.",
        "optional": true
    },
    "trace_report_suffix": {
        "description": "Suffix to add to the trace report filename.",
        "optional": true
    },
    "megahit_fix_cpu_1": {
        "description": "Fix number of CPUs for MEGAHIT to 1. Not increased with retries.",
        "optional": true
    },
    "spades_fix_cpus": {
        "description": "Fix number of CPUs used by SPAdes. Not increased with retries.",
        "optional": true
    },
    "spadeshybrid_fix_cpus": {
        "description": "Fix number of CPUs used by SPAdes hybrid. Not increased with retries.",
        "optional": true
    },
    "metabat_rng_seed": {
        "description": "RNG seed for MetaBAT2.",
        "optional": true
    },
    "clip_tool": {
        "description": "Specify which adapter clipping tool to use.",
        "optional": true
    },
    "save_clipped_reads": {
        "description": "Specify to save the resulting clipped FASTQ files to --outdir.",
        "optional": true
    },
    "reads_minlength": {
        "description": "The minimum length of reads must have to be retained for downstream analysis.",
        "optional": true
    },
    "fastp_qualified_quality": {
        "description": "Minimum phred quality value of a base to be qualified in fastp.",
        "optional": true
    },
    "fastp_cut_mean_quality": {
        "description": "The mean quality requirement used for per read sliding window cutting by fastp.",
        "optional": true
    },
    "fastp_save_trimmed_fail": {
        "description": "Save reads that fail fastp filtering in a separate file. Not used downstream.",
        "optional": true
    },
    "adapterremoval_minquality": {
        "description": "The minimum base quality for low-quality base trimming by AdapterRemoval.",
        "optional": true
    },
    "adapterremoval_trim_quality_stretch": {
        "description": "Turn on quality trimming by consecutive stretch of low quality bases, rather than by window.",
        "optional": true
    },
    "adapterremoval_adapter1": {
        "description": "Forward read adapter to be trimmed by AdapterRemoval.",
        "optional": true
    },
    "adapterremoval_adapter2": {
        "description": "Reverse read adapter to be trimmed by AdapterRemoval for paired end data.",
        "optional": true
    },
    "host_genome": {
        "description": "Name of iGenomes reference for host contamination removal.",
        "optional": true
    },
    "host_fasta": {
        "description": "Fasta reference file for host contamination removal.",
        "optional": true
    },
    "host_fasta_bowtie2index": {
        "description": "Bowtie2 index directory corresponding to --host_fasta reference file for host contamination removal.",
        "optional": true
    },
    "host_removal_verysensitive": {
        "description": "Use the --very-sensitive instead of the --sensitive setting for Bowtie 2.",
        "optional": true
    },
    "host_removal_save_ids": {
        "description": "Save the read IDs of removed host reads.",
        "optional": true
    },
    "save_hostremoved_reads": {
        "description": "Save input FASTQ files with host reads removed to --outdir.",
        "optional": true
    },
    "keep_phix": {
        "description": "Keep reads similar to the Illumina internal standard PhiX genome.",
        "optional": true
    },
    "phix_reference": {
        "description": "Genome reference used to remove Illumina PhiX contaminant reads.",
        "optional": true
    },
    "skip_clipping": {
        "description": "Skip read preprocessing using fastp or adapterremoval.",
        "optional": true
    },
    "save_phixremoved_reads": {
        "description": "Save input FASTQ files with phiX reads removed to --outdir.",
        "optional": true
    },
    "bbnorm": {
        "description": "Run BBnorm to normalize sequence depth.",
        "optional": true
    },
    "bbnorm_target": {
        "description": "Set BBnorm target maximum depth.",
        "optional": true
    },
    "bbnorm_min": {
        "description": "Set BBnorm minimum depth.",
        "optional": true
    },
    "save_bbnorm_reads": {
        "description": "Save normalized read files to output directory.",
        "optional": true
    },
    "skip_adapter_trimming": {
        "description": "Skip removing adapter sequences from long reads.",
        "optional": true
    },
    "longreads_min_length": {
        "description": "Discard any read which is shorter than this value.",
        "optional": true
    },
    "longreads_min_quality": {
        "description": "Discard any read which has a mean quality score lower than this value.",
        "optional": true
    },
    "longreads_keep_percent": {
        "description": "Keep this percent of bases.",
        "optional": true
    },
    "longreads_length_weight": {
        "description": "The higher the more important is read length when choosing the best reads.",
        "optional": true
    },
    "keep_lambda": {
        "description": "Keep reads similar to the ONT internal standard Lambda genome.",
        "optional": true
    },
    "lambda_reference": {
        "description": "Genome reference used to remove ONT Lambda contaminant reads.",
        "optional": true
    },
    "save_lambdaremoved_reads": {
        "description": "Specify to save input FASTQ files with lambda reads removed to --outdir.",
        "optional": true
    },
    "save_porechop_reads": {
        "description": "Specify to save the resulting clipped FASTQ files to --outdir.",
        "optional": true
    },
    "save_filtered_longreads": {
        "description": "Specify to save the resulting length filtered long read FASTQ files to --outdir.",
        "optional": true
    },
    "longread_adaptertrimming_tool": {
        "description": "Specify which long read adapter trimming tool to use.",
        "optional": true
    },
    "longread_filtering_tool": {
        "description": "Specify which long read filtering tool to use.",
        "optional": true
    },
    "centrifuge_db": {
        "description": "Database for taxonomic binning with centrifuge.",
        "optional": true
    },
    "kraken2_db": {
        "description": "Database for taxonomic binning with kraken2.",
        "optional": true
    },
    "krona_db": {
        "description": "Database for taxonomic binning with krona.",
        "optional": true
    },
    "skip_krona": {
        "description": "Skip creating a krona plot for taxonomic binning.",
        "optional": true
    },
    "cat_db": {
        "description": "Database for taxonomic classification of MAGs (CAT/BAT).",
        "optional": true
    },
    "cat_db_generate": {
        "description": "Generate CAT database.",
        "optional": true
    },
    "save_cat_db": {
        "description": "Save the CAT database generated when specified by --cat_db_generate.",
        "optional": true
    },
    "cat_official_taxonomy": {
        "description": "Only return official taxonomic ranks when running CAT.",
        "optional": true
    },
    "skip_gtdbtk": {
        "description": "Skip the running of GTDB, as well as the automatic download of the database.",
        "optional": true
    },
    "gtdb_db": {
        "description": "Specify the location of a GTDBTK database.",
        "optional": true
    },
    "gtdb_mash": {
        "description": "Specify the location of a GTDBTK mash database.",
        "optional": true
    },
    "gtdbtk_min_completeness": {
        "description": "Min. bin completeness (in %) required to apply GTDB-tk classification.",
        "optional": true
    },
    "gtdbtk_max_contamination": {
        "description": "Max. bin contamination (in %) allowed to apply GTDB-tk classification.",
        "optional": true
    },
    "gtdbtk_min_perc_aa": {
        "description": "Min. fraction of AA (in %) in the MSA for bins to be kept.",
        "optional": true
    },
    "gtdbtk_min_af": {
        "description": "Min. alignment fraction to consider closest genome.",
        "optional": true
    },
    "gtdbtk_pplacer_cpus": {
        "description": "Number of CPUs used for the by GTDB-Tk run tool pplacer.",
        "optional": true
    },
    "gtdbtk_pplacer_useram": {
        "description": "Speed up pplacer step of GTDB-Tk by loading to memory.",
        "optional": true
    },
    "coassemble_group": {
        "description": "Co-assemble samples within one group, instead of each sample separately.",
        "optional": true
    },
    "spades_options": {
        "description": "Additional custom options for SPAdes and SPAdesHybrid.",
        "optional": true
    },
    "spades_downstreaminput": {
        "description": "Specify whether to use contigs or scaffolds assembled by SPAdes.",
        "optional": true
    },
    "megahit_options": {
        "description": "Additional custom options for MEGAHIT.",
        "optional": true
    },
    "skip_spades": {
        "description": "Skip Illumina-only SPAdes assembly.",
        "optional": true
    },
    "skip_spadeshybrid": {
        "description": "Skip SPAdes hybrid assembly.",
        "optional": true
    },
    "skip_megahit": {
        "description": "Skip MEGAHIT assembly.",
        "optional": true
    },
    "skip_quast": {
        "description": "Skip metaQUAST.",
        "optional": true
    },
    "skip_prodigal": {
        "description": "Skip Prodigal gene prediction.",
        "optional": true
    },
    "prokka_with_compliance": {
        "description": "Turn on Prokka compliance mode for truncating contig names.",
        "optional": true
    },
    "prokka_compliance_centre": {
        "description": "Specify sequencing centre name for Prokka compliance mode.",
        "optional": true
    },
    "skip_prokka": {
        "description": "Skip Prokka genome annotation.",
        "optional": true
    },
    "skip_metaeuk": {
        "description": "Skip MetaEuk gene prediction and annotation.",
        "optional": true
    },
    "metaeuk_mmseqs_db": {
        "description": "Name of mmseqs2 database to download for MetaEuk.",
        "optional": true
    },
    "metaeuk_db": {
        "description": "Path to protein FASTA or mmseqs2-formatted database for MetaEuk.",
        "optional": true
    },
    "save_mmseqs_db": {
        "description": "Save the downloaded mmseqs2 database specified in --metaeuk_mmseqs_db.",
        "optional": true
    },
    "run_virus_identification": {
        "description": "Run virus identification.",
        "optional": true
    },
    "genomad_db": {
        "description": "Database for virus classification with geNomad.",
        "optional": true
    },
    "genomad_min_score": {
        "description": "Minimum geNomad score for a sequence to be considered viral.",
        "optional": true
    },
    "genomad_splits": {
        "description": "Number of groups that geNomad's MMSeqs2 database should be split into.",
        "optional": true
    },
    "binning_map_mode": {
        "description": "Defines mapping strategy to compute co-abundances for binning (all, group, own).",
        "optional": true
    },
    "skip_binning": {
        "description": "Skip metagenome binning entirely.",
        "optional": true
    },
    "skip_metabat2": {
        "description": "Skip MetaBAT2 Binning.",
        "optional": true
    },
    "skip_maxbin2": {
        "description": "Skip MaxBin2 Binning.",
        "optional": true
    },
    "skip_concoct": {
        "description": "Skip CONCOCT Binning.",
        "optional": true
    },
    "min_contig_size": {
        "description": "Minimum contig size to be considered for binning and bin quality check.",
        "optional": true
    },
    "min_length_unbinned_contigs": {
        "description": "Minimal length of contigs not in any bin but treated as individual genome.",
        "optional": true
    },
    "max_unbinned_contigs": {
        "description": "Maximal number of contigs not in any bin but treated as individual genome.",
        "optional": true
    },
    "bin_concoct_chunksize": {
        "description": "Length of sub-contigs cut up prior CONCOCT binning.",
        "optional": true
    },
    "bin_concoct_overlap": {
        "description": "Overlap between each sub-contig prior CONCOCT binning.",
        "optional": true
    },
    "bin_concoct_donotconcatlast": {
        "description": "Do not append last contig less than sub-contig length to the last correct length contig.",
        "optional": true
    },
    "bowtie2_mode": {
        "description": "Bowtie2 alignment mode.",
        "optional": true
    },
    "save_assembly_mapped_reads": {
        "description": "Save output of mapping raw reads back to assembled contigs.",
        "optional": true
    },
    "bin_domain_classification": {
        "description": "Enable domain-level classification of bins using Tiara.",
        "optional": true
    },
    "bin_domain_classification_tool": {
        "description": "Tool for domain classification of bins (currently 'tiara').",
        "optional": true
    },
    "tiara_min_length": {
        "description": "Minimum contig length for Tiara to use for domain classification.",
        "optional": true
    },
    "exclude_unbins_from_postbinning": {
        "description": "Exclude unbinned contigs in the post-binning steps.",
        "optional": true
    },
    "skip_binqc": {
        "description": "Disable bin QC with BUSCO, CheckM or CheckM2.",
        "optional": true
    },
    "binqc_tool": {
        "description": "Specify which tool for bin quality-control validation to use.",
        "optional": true
    },
    "busco_db": {
        "description": "Download URL, path to tar.gz, or local directory of BUSCO lineage datasets.",
        "optional": true
    },
    "busco_auto_lineage_prok": {
        "description": "Run BUSCO with automated lineage selection, ignoring eukaryotes.",
        "optional": true
    },
    "save_busco_db": {
        "description": "Save the used BUSCO lineage datasets provided via --busco_db.",
        "optional": true
    },
    "busco_clean": {
        "description": "Enable clean-up of temporary files created during BUSCO runs.",
        "optional": true
    },
    "checkm_download_url": {
        "description": "URL pointing to CheckM database for auto download, if local path not supplied.",
        "optional": true
    },
    "checkm_db": {
        "description": "Path to local folder containing already downloaded and uncompressed CheckM database.",
        "optional": true
    },
    "save_checkm_data": {
        "description": "Save the used CheckM reference files downloaded when not using --checkm_db parameter.",
        "optional": true
    },
    "checkm2_db": {
        "description": "Path to local file of an already downloaded and uncompressed CheckM2 database (.dmnd).",
        "optional": true
    },
    "checkm2_db_version": {
        "description": "CheckM2 database version number to download (Zenodo record ID).",
        "optional": true
    },
    "save_checkm2_data": {
        "description": "Save the used CheckM2 reference files downloaded when not using --checkm2_db parameter.",
        "optional": true
    },
    "refine_bins_dastool": {
        "description": "Turn on bin refinement using DAS Tool.",
        "optional": true
    },
    "refine_bins_dastool_threshold": {
        "description": "Specify single-copy gene score threshold for bin refinement.",
        "optional": true
    },
    "postbinning_input": {
        "description": "Specify which binning output is sent for downstream steps.",
        "optional": true
    },
    "run_gunc": {
        "description": "Turn on GUNC genome chimerism checks.",
        "optional": true
    },
    "gunc_db": {
        "description": "Specify a path to a pre-downloaded GUNC dmnd database file.",
        "optional": true
    },
    "gunc_database_type": {
        "description": "Specify which database to auto-download if not supplying own (progenomes/gtdb).",
        "optional": true
    },
    "gunc_save_db": {
        "description": "Save the used GUNC reference files downloaded when not using --gunc_db parameter.",
        "optional": true
    },
    "ancient_dna": {
        "description": "Turn on/off the ancient DNA subworkflow.",
        "optional": true
    },
    "pydamage_accuracy": {
        "description": "PyDamage accuracy threshold.",
        "optional": true
    },
    "skip_ancient_damagecorrection": {
        "description": "Deactivate damage correction of ancient contigs using variant and consensus calling.",
        "optional": true
    },
    "freebayes_ploidy": {
        "description": "Ploidy for variant calling.",
        "optional": true
    },
    "freebayes_min_basequality": {
        "description": "Minimum base quality required for variant calling.",
        "optional": true
    },
    "freebayes_minallelefreq": {
        "description": "Minimum minor allele frequency for considering variants.",
        "optional": true
    },
    "bcftools_view_high_variant_quality": {
        "description": "Minimum genotype quality for considering a variant high quality.",
        "optional": true
    },
    "bcftools_view_medium_variant_quality": {
        "description": "Minimum genotype quality for considering a variant medium quality.",
        "optional": true
    },
    "bcftools_view_minimal_allelesupport": {
        "description": "Minimum number of bases supporting the alternative allele.",
        "optional": true
    }
}


