AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Step Functions pipeline to orchestrate HealthOmics workflows with polling and SNS notifications

Parameters:
  InputBucketName:
    Type: String
    Description: S3 bucket for raw FASTQ uploads
  
  OutputBucketName:
    Type: String
    Description: S3 bucket that receives run outputs
  
  SNSTopicEmail1:
    Type: String
    Description: First email address for workflow completion notifications
    Default: ""
  
  SNSTopicEmail2:
    Type: String
    Description: Second email address for workflow completion notifications (optional)
    Default: ""

  WorkflowConfigTableName:
    Type: String
    Description: Name of the DynamoDB table containing workflow configuration
    Default: "omics-workflow-config"

Resources:
  # SNS Topic for notifications
  WorkflowNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: omics-workflow-notifications
      DisplayName: HealthOmics Workflow Notifications

  # First email subscription
  EmailSubscription1:
    Type: AWS::SNS::Subscription
    Condition: HasEmail1
    Properties:
      Protocol: email
      TopicArn: !Ref WorkflowNotificationTopic
      Endpoint: !Ref SNSTopicEmail1

  # Second email subscription
  EmailSubscription2:
    Type: AWS::SNS::Subscription
    Condition: HasEmail2
    Properties:
      Protocol: email
      TopicArn: !Ref WorkflowNotificationTopic
      Endpoint: !Ref SNSTopicEmail2

  # IAM Role for Step Functions
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: omics-stepfunctions-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt LaunchWorkflowsLambda.Arn
                  - !GetAtt PollWorkflowsLambda.Arn
                  - !GetAtt SendNotificationLambda.Arn

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: omics-pipeline-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OmicsAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - omics:StartRun
                  - omics:GetRun
                  - omics:ListRuns
                  - omics:TagResource
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${InputBucketName}
                  - !Sub arn:${AWS::Partition}:s3:::${InputBucketName}/*
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:${AWS::Partition}:s3:::${OutputBucketName}/*
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WorkflowConfigTableName}
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref WorkflowNotificationTopic

  # Lambda to launch workflows
  LaunchWorkflowsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: launch-omics-workflows
      Runtime: python3.12
      Timeout: 300
      Handler: launch-omics-workflows.handler
      CodeUri: ../lambda_src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          CONFIG_TABLE: !Ref WorkflowConfigTableName   

  # Lambda to poll workflow status
  PollWorkflowsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: poll-omics-workflows
      Runtime: python3.12
      Timeout: 60
      Handler: poll-omics-workflows.handler
      CodeUri: ../lambda_src/
      Role: !GetAtt LambdaExecutionRole.Arn

  # Lambda to send notifications
  SendNotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: send-omics-notification
      Runtime: python3.12
      Timeout: 60
      Handler: send-omics-notifications.handler
      CodeUri: ../lambda_src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref WorkflowNotificationTopic

  # Step Functions State Machine
  OmicsPipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: omics-workflow-pipeline
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Orchestrates dynamic HealthOmics workflows with polling and notifications.",
          "StartAt": "Submit Job",
          "QueryLanguage": "JSONata",
          "States": {
            "Submit Job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${LaunchWorkflowsLambda.Arn}",
                "Payload": "{% $states.input %}"
              },
              "Output": "{% $merge([$states.input, $states.result.Payload]) %}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Wait X Seconds"
            },
            "Wait X Seconds": {
              "Type": "Wait",
              "Seconds": "300",
              "Next": "Get Job Status"
            },
            "Get Job Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${PollWorkflowsLambda.Arn}",
                "Payload": {
                  "omics_run_id": "{% $states.input.omics_run_id %}"
                }
              },
              "Output": "{% $merge([$states.input, {'status': $states.result.Payload}]) %}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Job Complete?"
            },
            "Job Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Job Response Failed",
                  "Condition": "{% $states.input.status = 'FAILED' %}"
                },
                {
                  "Next": "Job Response Succeeded",
                  "Condition": "{% $states.input.status = 'SUCCEEDED' %}"
                }
              ],
              "Default": "Wait X Seconds"
            },
            "Job Response Failed": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${SendNotificationLambda.Arn}",
                "Payload": "{% $states.input %}"
              },
              "Output": "{% $states.result.Payload %}",
              "Next": "Job Failed"
            },
            "Job Failed": {
              "Type": "Fail",
              "Cause": "AWS Omics Job Failed",
              "Error": "DescribeJob returned FAILED"
            },
            "Job Response Succeeded": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${SendNotificationLambda.Arn}",
                "Payload": "{% $states.input %}"
              },
              "Output": "{% $states.result.Payload %}",
              "End": true
            }
          }
        }

  # Lambda to trigger Step Functions from S3
  S3TriggerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: trigger-stepfunctions-from-s3
      Runtime: python3.12
      Timeout: 60
      Handler: trigger-stepfunctions-from-s3.handler
      CodeUri: ../lambda_src/
      Role: !GetAtt S3TriggerLambdaRole.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref OmicsPipelineStateMachine
          OUT_BUCKET: !Ref OutputBucketName
          WORKFLOWS_TABLE: !Ref WorkflowConfigTableName

  # IAM Role for S3 Trigger Lambda
  S3TriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: omics-s3-trigger-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AndStepFunctions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:${AWS::Partition}:s3:::${InputBucketName}/*
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref OmicsPipelineStateMachine
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WorkflowConfigTableName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${InputBucketName}
                  - !Sub arn:${AWS::Partition}:s3:::${InputBucketName}/*

  # S3 Lambda Permission
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3TriggerLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:${AWS::Partition}:s3:::${InputBucketName}

Conditions:
  HasEmail1: !Not [!Equals [!Ref SNSTopicEmail1, ""]]
  HasEmail2: !Not [!Equals [!Ref SNSTopicEmail2, ""]]

Outputs:
  StateMachineArn:
    Description: ARN of the Step Functions state machine
    Value: !Ref OmicsPipelineStateMachine
  
  SNSTopicArn:
    Description: ARN of the SNS topic for notifications
    Value: !Ref WorkflowNotificationTopic

  S3TriggerLambdaArn:
    Description: ARN of the Lambda function that triggers the pipeline from S3
    Value: !GetAtt S3TriggerLambda.Arn
    Export:
      Name: "OmicsS3TriggerLambdaArn" 